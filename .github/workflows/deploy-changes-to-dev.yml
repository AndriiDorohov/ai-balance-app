name: Deploy changes to Dev

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-to-server:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get ssh key
      run: |
        echo "${{ secrets.SSH_KEY }}" > ../id_ed25519
        chmod 600 ../id_ed25519

    - name: Get repo name
      run: |
        echo "REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_ENV

    - name: Get ec2 instance IP
      run: |
        PUBLIC_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=${{ env.REPO_NAME }}" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --output text)
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

    - name: Create .env for frontend
      run: |
        cat <<EOF > ./client/.env
        ${{ secrets.CLIENT_ENV }}
        EOF
        cat ./client/.env

    - name: Create .env for backend
      run: |
        cat <<EOF > ./server/.env
        ${{ secrets.SERVER_ENV }}
        EOF
        cat ./server/.env

    - name: Deploy to dev server
      run: |
        cd ./server
        docker build --platform linux/amd64 -f ./Dockerfile -t backend .
        cd ../client
        docker build --platform linux/amd64 -f ./Dockerfile -t frontend .
        cd ..

        echo "Cleaning up Docker on remote server"
        ssh -o StrictHostKeyChecking=no -i ../id_ed25519 ubuntu@${{ env.PUBLIC_IP }} 'docker system prune -af || true'

        echo "Sending Docker images to remote server"
        docker save backend:latest | ssh -o StrictHostKeyChecking=no -i ../id_ed25519 ubuntu@${{ env.PUBLIC_IP }} 'docker load'
        docker save frontend:latest | ssh -o StrictHostKeyChecking=no -i ../id_ed25519 ubuntu@${{ env.PUBLIC_IP }} 'docker load'

        echo "Starting deployment on remote server"
        ssh -o StrictHostKeyChecking=no -i ../id_ed25519 ubuntu@${{ env.PUBLIC_IP }} << EOF
          set -e
          cd ~/${{ env.REPO_NAME }} || { echo 'Project directory not found'; exit 1; }

          echo "Pulling latest changes"
          git pull

          echo "Stopping existing containers"
          docker compose down || echo "No containers running"

          echo "Starting containers with rebuild"
          docker compose up --build -d

          echo "Deployment complete"
          docker compose ps
          docker compose logs --tail=50
        EOF
